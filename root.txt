111(Hashing)
.
#include<iostream>
#include<string.h>
using namespace std;

 struct node
{
 int value;
 node* next;
}*HashTable[10];

class hashing
{
public:
hashing()
{
for(int i=0 ; i<10 ; i++)
{
   		HashTable[i]=NULL;
 	}
 }

int HashFunction(int value)
{
  return (value%10);
 }
 node* create_node(int x)	
{
 	 node* temp=new node;
  	temp->next=NULL;
  	temp->value=x;
  	return temp;
 }

 void display()
{
 	 for(int i=0 ; i< 10; i++)
{
  	 	node * temp=new node;
   		temp=HashTable[i];
   		cout<<"a["<<i<<"] : ";
   		while(temp !=NULL)
{
    			cout<<" ->"<<temp->value;
    			temp=temp->next;
  		 }
   		cout<<"\n";
}
 }

int searchElement(int value)
{
  	 bool flag = false;
              int hash_val = HashFunction(value);
              node* entry = HashTable[hash_val];
              cout<<"\nElement found at : ";
              while (entry != NULL)
      	 {
                  	if (entry->value==value)
          		 {
                      		cout<<hash_val<<" : "<<entry->value<<endl;
                     		flag = true;
                 	 }
                  	entry = entry->next;
               }
             		 if (!flag)
           	   	        return -1;
 }

 void deleteElement(int value)
{
  	 int hash_val = HashFunction(value);
              node* entry = HashTable[hash_val];
              if (entry == NULL )
              {
              	 cout<<"No Element found ";
                	  return;
              }

              if(entry->value==value)
{
               	HashTable[hash_val]=entry->next;
               	return;
              }
              while ((entry->next)->value != value)
       	{
                  entry = entry->next;
              }
              entry->next=(entry->next)->next;
 }

 void insertElement(int value)
{
  	 int hash_val = HashFunction(value);
             // node* prev = NULL;
              //node* entry = HashTable[hash_val];
              node* temp=new node;
              node* head=new node;
              head = create_node(value);
              temp=HashTable[hash_val];
              if (temp == NULL)
                           	   {
                              HashTable[hash_val] =head;
                               }
              Else
{
              	 while (temp->next != NULL)
              	{
                	  temp = temp->next;
           		   }	
             		 temp->next =head;
              }
 }
};
int main()
{
 	int ch;
 int data,search,del;
 	hashing h;
 	do
{
cout<<"\nTelephone : \n1.Insert \n2.Display \n3.Search \n4.Delete \n5.Exit";
  		cin>>ch;
  		switch(ch)
{
  			case 1:cout<<"\nEnter phone no. to be inserted : ";
    				cin>>data;
h.insertElement(data);
   				 break;
  			case 2:h.display();
    				break;
  			case 3:cout<<"\nEnter the no to be searched : ";
    				cin>>search;

   				 if (h.searchElement(search) == -1)
                			{
             					cout<<"No element found at key ";
            					 continue;
                			}
    				break;
  			case 4:cout<<"\nEnter the phno. to be deleted : ";
   				 cin>>del;
   				 h.deleteElement(del);
   				  cout<<"Phno. Deleted"<<endl;
    				break;
  				}
 		}while(ch!=5);
 		return 0;

} 














222(ADT)
.
#include<iostream>
#include<string.h>
usingnamespacestd;
classHashFunction
{
typedefstructhash
{
longkey;
charname[10];
}hash;
hashh[10];
public:
HashFunction();
voidinsert();
voiddisplay();
intfind(long);
voidDelete(long);
};
HashFunction::HashFunction()
{
inti;
for(i=0;i<10;i++)
{
h[i].key=-1;
strcpy(h[i].name,"NULL");
}
}
voidHashFunction::Delete(longk)
{
intindex=find(k);
if(index==-1)
{
cout<<"\n\tKeyNotFound";
}
else
{
h[index].key=-1;
strcpy(h[index].name,"NULL");
cout<<"\n\tKeyisDeleted";
}
}
intHashFunction::find(longk)
{
inti;
for(i=0;i<10;i++)
{
if(h[i].key==k)
{
cout<<"\n\t"<<h[i].key<<"isFoundat"<<i<<"LocationWithName"<<h[i].name;
returni;
}
}
if(i==10)
{
return-1;
}
}
voidHashFunction::display()
{
inti;
cout<<"\n\t\tKey\t\tName";
for(i=0;i<10;i++)
{
cout<<"\n\th["<<i<<"]\t"<<h[i].key<<"\t\t"<<h[i].name;
}
}
voidHashFunction::insert()
{
charans,n[10],ntemp[10];
longk,temp;
intv,hi,cnt=0,flag=0,i;
do
{
if(cnt>=10)
{
cout<<"\n\tHashTableisFULL";
break;
}
cout<<"\n\tEnteraTelephoneNo:";
cin>>k;
cout<<"\n\tEnteraClientName:";
cin>>n;
hi=k%10;//hashfunction
if(h[hi].key==-1)
{
h[hi].key=k;
strcpy(h[hi].name,n);
}
else
{
if(h[hi].key%10!=hi)
{
temp=h[hi].key;
strcpy(ntemp,h[hi].name);
h[hi].key=k;
strcpy(h[hi].name,n);
for(i=hi+1;i<10;i++)
{
if(h[i].key==-1)
{
h[i].key=temp;
strcpy(h[i].name,ntemp);
flag=1;
break;
}
}
for(i=0;i<hi&&flag==0;i++)
{
if(h[i].key==-1)
{
h[i].key=temp;
strcpy(h[i].name,ntemp);
break;
}
}
}
else
{
for(i=hi+1;i<10;i++)
{
if(h[i].key==-1)
{
h[i].key=k;
strcpy(h[i].name,n);
flag=1;
break;
}
}
for(i=0;i<hi&&flag==0;i++)
{
if(h[i].key==-1)
{
h[i].key=k;
strcpy(h[i].name,n);
break;
}
}
}
}
flag=0;
cnt++;
cout<<"\n\t.....DoYouWanttoInsertMoreKey:y/n";
cin>>ans;
}while(ans=='y'||ans=='Y');
}
intmain()
{
longk;
intch,index;
charans;
HashFunctionobj;
do
{
cout<<"\n\t*****Telephone(ADT)*****";
cout<<"\n\t1.Insert\n\t2.Display\n\t3.Find\n\t4.Delete\n\t5.Exit";cout<<"\n\t.....EnterYourChoice:";
cin>>ch;
switch(ch)
{
case1:obj.insert();
break;
case2:obj.display();
break;
case3:cout<<"\n\tEnteraKeyWhichYouWanttoSearch:";cin>>k;
index=obj.find(k);
if(index==-1)
{
cout<<"\n\tKeyNotFound";
}
break;
case4:cout<<"\n\tEnteraKeyWhichYouWanttoDelete:";cin>>k;
obj.Delete(k);
break;
case5:
break;
}
cout<<"\n\t.....DoYouWanttoContinueinMainMenu:y/n";cin>>ans;
}while(ans=='y'||ans=='Y');
}

















333(Chapters)
.
#include<iostream>
#include<stdlib.h>
using namespace std;

struct node
{
char label[60];
int chcount;
node *child[50];
}*root;

class general
{
public:
void insert();
void display();

general()
{
root = NULL;
}
};

void general::insert()
{
int secount;
root = new node();
cout<<"Enter the name of book:"<<endl;
cin>>root->label;
cout<<"Enter the total number of chapters in book:"<<endl;
cin>>root->chcount;
for(int i=0;i<root->chcount;i++)
{
root->child[i] = new node();
cout<<"Enter the name of chapter:  "<<i+1<<endl;
cin>>root->child[i]->label;

cout<<"Enter the number of sections:"<<endl;
cin>>root->child[i]->chcount;
for(int j=0;j<root->child[i]->chcount;j++)
{
root->child[i]->child[j] = new node();
cout<<"Enter the name of section :"<<j+1<<endl;
cin>>root->child[i]->child[j]->label;

cout<<"Enter the number of sub sections:"<<endl;
cin>>root->child[i]->child[j]->chcount;
for(int k=0; k<root->child[i]->child[j]->chcount; k++)
{
root->child[i]->child[j]->child[k] = new node();
cout<<"Enter the name of sub section:"<<endl;
cin>>root->child[i]->child[j]->child[k]->label;
}
}
}
}

void general::display()
{
if(root != NULL)
{
cout<<"**** Hierarchy of Book ****"<<endl;
cout<<"Book Name is"<<root->label<<endl;
for(int i=0; i<root->chcount; i++)
{
cout<<"— "<<root->child[i]->label<<endl;
for(int j=0; j<root->child[i]->chcount; j++)
{
cout<<"——– "<<root->child[i]->child[j]->label<<endl;
for(int k=0; k<root->child[i]->child[j]->chcount; k++)
{
cout<<"—————– "<<root->child[i]->child[j]->child[k]->label<<endl;
}
}
}
}
}

int main()
{
general g;
int ch;
do
{
cout<<"~~ MENU ~~"<<endl;
cout<<"1. Insert."<<endl;
cout<<"2. Display."<<endl;
cout<<"Enter the choice:"<<endl;
cin>>ch;

switch(ch)
{
case 1: g.insert();
break;
case 2: g.display();
break;
}
}while(ch<3);
}

















444(Expression Tree)
.
#include<iostream>
using namespace std;
struct node{
 char data;
 node *left, *right;

};
node *creatNode(char c)
{
 node *nn = new node();
 nn->data =c;
 nn->left = nn->right = NULL;
 return nn;
}
struct Stack{
 int size;
 int top= -1;
 node *arr[100];
};
bool isOperator(char c)
{
 if (c == '+' || c ==
'-' ||
 c == '*' || c == '/' ||
 c == '^')
 return true;
 return false;
}
int isEmpty(struct Stack * ptr){
 if (ptr->top == -1){
 return 1;
 }else
 {
 return 0;
 }
}
int isFull(struct Stack * ptr){
 if (ptr->top == ptr->size-1){
 return 1;
 }else
 {
 return 0;
 }
}
void push(struct Stack *ptr, node* n){
 if (isFull(ptr))
 {
 printf("Stack Overflow, cannot add %d",ptr->arr[ptr->top]);
 }else
 {
 ptr->top++;

 ptr->arr[ptr->top] = n;
 printf("Successfully added %c\n", n->data);
 }
}
node* pop(struct Stack* ptr){
 node *val;
 if (isEmpty(ptr))
 {
 printf("Stack underflow, cannot pop %d", ptr->arr[ptr-
>top]);
 }
 else
 {
 val = ptr->arr[ptr->top--];
 }
 return val;
}
node* stackTop(struct Stack *ptr)
{
 return ptr->arr[ptr->top];
}
node * creatExpressionTree(char prefix[]){
 struct Stack *sp = new Stack;
 node *n, *RVal, *LVal;

 for (int i = strlen(prefix); i >=0; i--)
 {

 if (!isOperator(prefix[i])){
 n = creatNode(prefix[i]);

 push(sp, n);
 }else
 {
 n = creatNode(prefix[i]);
 LVal = pop(sp);
 RVal = pop(sp);
 n->left = LVal;
 n->right = RVal;
 push(sp, n);
 }

}
 n = stackTop(sp);
 pop(sp);
 return n;
}
void PostOrder(struct node *root){
 struct Stack *s1 = new Stack;
 struct Stack *s2 = new Stack;
 push(s1, root);
 while (!isEmpty(s1))
 {
 root = pop(s1);
 push(s2, root);
 if(root->left !=NULL)
 push(s1, root->left);
 if(root->right != NULL)
 push(s1, root->right);
 }
 while (!isEmpty(s2))
 {
 root = pop(s2);
 cout << root->data << " ";
 }

}
void DeleteTree(struct node* root){
 if(root==NULL){

 return;
 }
 DeleteTree(root->left);
 DeleteTree(root->right);
 delete root;

}
int main(){
 char prefix[] = "+--a*bc/def";
 node *r = creatExpressionTree(prefix);
 printf("post order traversal is :\n");

 PostOrder(r);
 cout << "Deleting tree....\n";
 DeleteTree(r);

 r = NULL;
 cout << "Tree is deleted!\n";
 PostOrder(r);
 return 0;
}



















555(BST)
.
#include<iostream>
#include<math.h>
using namespace std;

struct Bstnode
{
 int data;
 Bstnode *left = NULL;
 Bstnode *right = NULL;
 
};

class Btree
{
 
  int n;
  int x;
  int flag;
  
public:
  Bstnode * root;
 Btree()
 {
  root = NULL;
 }
 
 Bstnode *GetNewNode(int in_data)
 {
  Bstnode * ptr = new Bstnode();
  ptr->data = in_data;
  ptr->left = NULL;
  ptr->right = NULL;
  return ptr;
 }
 
 Bstnode *insert( Bstnode *temp , int in_data)
 {
  if( temp == NULL )
  {
   temp = GetNewNode(in_data);
  }
  else if( temp->data > in_data)
  {
   temp->left = insert(temp->left , in_data);
  }
  else
  {
   temp->right = insert( temp->right , in_data);
  }
  return temp;
 }
 
 void input()
 {
  cout<<"ENTER NUMBER OF ELEMENTS IN THE BST : ";
  cin>>n;
  for(int i = 0 ; i < n ; i++)
  {
   cout<<"NUMBER = ";
   cin>>x;
   root = insert(root , x);
  }
 }
 
 int search(Bstnode *temp ,int in_data)
 {
  if( temp != NULL)
  {
   if(temp->data == in_data)
   {
    cout<<":-- RECORD FOUND --:"<<endl;
    return 1;
   }
   else if(in_data < temp->data)
   {
    this->search(temp->left, in_data);
   }
   else if(in_data > temp->data)
   {
    this->search(temp->left , in_data);
   }
  }
  else
  {
    return 0;
  }
 }
 
 
 void minvalue(Bstnode *temp)
 {
  while(temp->left != NULL)
  {
   temp = temp->left;
  }
  cout<<"MINIMUM VALUE = "<<temp->data<<endl;
 }
   
 void mirror(Bstnode *temp)
 {
  if(temp == NULL)
  {
   return;
  }
  else
  {
   Bstnode *ptr;
   mirror(temp->left);
   mirror(temp->right);
   ptr = temp->left;
   temp->left = temp->right;
   temp->right = ptr; 
  }
 }
 
 void display()
 {
  cout<<endl<<"--- INORDER TRAVERSAL ---"<<endl;
  inorder(root);
  cout<<endl;
  cout<<endl<<"--- POSTORDER TRAVERSAL ---"<<endl;
  postorder(root);
  cout<<endl;
  cout<<endl<<"--- PREORDER TRAVERSAL ---"<<endl;
  preorder(root);
  cout<<endl;
  
 }
 
 void inorder(Bstnode *temp)
 {
  if(temp != NULL)
  {
   inorder(temp->left);
   cout<<temp->data<<"  ";
   inorder(temp->right);
  }
 } 
 
 void postorder(Bstnode *temp)
 {
  if(temp != NULL)
  {
   postorder(temp->left);
   postorder(temp->right);
   cout<<temp->data<<" ";
  }
 }
 void preorder(Bstnode *temp)
 {
  if(temp != NULL)
  {
   cout<<temp->data<<" ";
   preorder(temp->left);
   preorder(temp->right);
  }
 } 
 
 int depth(Bstnode *temp)
 {
  if(temp == NULL) 
   return 0;
  return (max((depth(temp->left)),(depth(temp->right))) +1);  
 }
};

int main()
{
 Btree obj;
 obj.input();
 obj.display();
 int a = 0;
 a = obj.search(obj.root,10);
 if( a == 0)
 {
  cout<<"ELEMENT NOT FOUND"<<endl;
 }
 else
  cout<<"ELEMENT FOUND"<<endl;
 cout<<endl<<a<<endl;
 obj.minvalue(obj.root);
 obj.mirror(obj.root);
 obj.inorder(obj.root);
 //int d ;
 cout<<endl<<obj.depth(obj.root);
 //cout<<endl<<d<<endl;
 return 0;
}  \



















666(DFS/BFS)
#include<iostream>
using namespace std;
#include<stack>
struct node
{
	char data;
	node *left;
	node *right;
};
node *nnode;

class prefixexp
{
	public:
	node *root;
	int total,x;
	char prefix[50],rev[50],z,ch;
	stack <node*> stk;
	prefixexp()
	{
		root=NULL;
		cout<<"Number of characters in prefix Expression : ";
		cin>>total;
	}
	void create();
	void postorder(node *);
	void delete_tree();
};

void prefixexp::create()
{
	char prefix[total],rev[total];
	int k;
	x=total-1;
	for(int i=0;i<total;i++)
	{
		cout<<"Enter character "<<i+1<<" : ";
		cin>>z;
		prefix[i]=z;
		rev[x]=z;
		x--;	
	}
	
	cout<<"\n..........................................."<<endl;
	cout<<"\nPrefix :  ";
	for(int i=0;i<total;i++)
		cout<<prefix[i]<<"  ";
	cout<<"\nReverse :  ";
	for(int i=0;i<total;i++)
		cout<<rev[i]<<"  ";
	cout<<"\n..........................................."<<endl;
	

	k=0;
	ch=rev[0];
	while(k!=total) // only put k!=total .... ch!='\0' does not work here
	{
		nnode=new node;
		nnode->data=ch;
		nnode->left=NULL;
		nnode->right=NULL;
		root=nnode;
		if(int(ch)>=97 && int(ch)<=122) 	// for operands
		{   
			stk.push(nnode);
		}
		else	// for operators
		{
			nnode->left=stk.top();
			stk.pop();
			nnode->right=stk.top();
			stk.pop();
			stk.push(nnode);
		}
		k++;
		ch=rev[k];
	}
/*	cout<<"\n postorder is=";
	postorder(stk.top());*/
}

void prefixexp::postorder(node *temp)
{
	stack <node *> s1,s2;
	s1.push(temp);
	while(!s1.empty())
	{
		temp=s1.top();
		s2.push(temp);
		s1.pop();
		if(temp->left!=NULL)
			s1.push(temp->left);
		if(temp->right!=NULL)
			s1.push(temp->right);
	}
	
	while(!s2.empty())
	{
		cout<<s2.top()->data<<"	 ";
		s2.pop();
	}
}

void prefixexp::delete_tree()
{
	root=NULL;
	cout<<"Tree is deleted.";
}

int main()
{
	prefixexp pre;
	pre.create();
	cout<<"Post-order :  ";
	pre.postorder(pre.root);
	pre.delete_tree();
	pre.postorder(pre.root);//error occur due to we do null the tree
}
























777(Flight_Graph)
.
#include <iostream>
#include<iomanip>
using namespace std;

const int MAX=30;

class Queue //Queue for BFS TRAVERSAL
{
	int front,rear;
	string data[MAX];
public:
	Queue()
{
		front=-1;
		rear=-1;
}
	bool empty()
	{
		if(rear==-1)
			return 1;
		else
			return 0;
	}
	bool inqueue(string str)
	{
		if(front==-1 && rear==-1)
		{
			front=rear=0;
			data[rear]=str;
			return true;
		}
		else
		{
			rear=rear+1;
			data[rear]=str;
			return true;
		}
	}
	string dequeue()
	{
		string  p;
		if(front==rear)
		{
			p=data[front];
			front=-1;
			rear=-1;
		}
		else
		{
			p=data[front];
			front=front+1;
		}
		return p;
	}

};

class node //node class for each airport
{
	node *next;
	string city;
	int timeCost;
public:
	friend class graph;
	node()
	{
		next=NULL;
		city="";
		timeCost=-1;
	}
	node(string city,int weight)
	{
		next=NULL;
		this->city=city;
		timeCost=weight;
	}
};
class graph //Contains total graph of airports
{
	node *head[MAX];
	int n;
	int visited[MAX];
public:
	graph(int num)
{
		n=num;
		for(int i=0;i<n;i++)
			head[i]=NULL;
}
	void insert(string city1,string city2,int time);
	void insertUndirected(string city1,string city2,int time);
	void readdata(int gType);
	int getindex(string s1);
	void outFlights();
	void inFlights();
	void DFS(string str);
	void BFS();
	void dfsTraversal();

};
void graph::BFS()
{
	string str=head[0]->city;
	int j;
	//node *p;
	for(int i=0;i<n;i++)
		visited[i]=0;
	Queue queue;
	queue.inqueue(str);
	int i=getindex(str);
		cout<<"BFS Traversal: \n";
		cout<<" "<<str<<" ";
		visited[i]=1;
		while(!queue.empty())
		{
			string p=queue.dequeue();
			i=getindex(p);


			//visited[i]=1;

			for(node *q=head[i];q!=NULL;q=q->next)
			{
				i=getindex(q->city);
				str=q->city;
				if(!visited[i])
				{
					queue.inqueue(q->city);
					visited[i]=1;
					cout<<" "<<str<<" ";
				}
			}
		}
		cout<<"\n";
}
void graph::dfsTraversal()
	{
		for( int i=0;i<n;i++)
			visited[i]=0;
		cout<<"\nDFS TRAVERSAL: \n";
		DFS(head[0]->city);
		cout<<"\n";
	}
void graph::DFS(string str)
{
	node *p;
	int i=getindex(str);

	cout<<" "<<str<<" ";
	p=head[i];
	visited[i]=1;
	while(p!=NULL)
	{
		str=p->city;
		i=getindex(str);
		if(!visited[i])
			DFS(str);
		p=p->next;
	}

}
void graph::inFlights()
{
	int count[n];
	for(int i=0;i<n;i++)
		count[i]=0;
	cout<<"====== In degree =========\n";
	for(int i=0;i<n;i++)
	{
		cout<<"\n"<<setw(8)<<"Source"<<setw(8)<<"Destin."<<setw(8)<<"Time";
		for(int j=0;j<n;j++)
		{
			node *p=head[j]->next;
			while(p!=NULL)
			{
				if(p->city==head[i]->city)
				{
					count[i]=count[i]+1;
					cout<<"\n"<<setw(8)<<head[j]->city<<setw(8)<<head[i]->city<<setw(8)<<p->timeCost;
				}

				p=p->next;
			}
		}
		cout<<"\nFlights to "<<head[i]->city<<" = "<<count[i]<<endl;
		cout<<"-------------------------------------\n";
	}

}
void graph::outFlights()
{
	int count;
	for(int i=0;i<n;i++)
	{
		node *p=head[i]->next;
		count=0;
		cout<<"\n"<<setw(8)<<"Source"<<setw(8)<<"Destin."<<setw(8)<<"Time";
		if(p==NULL)
		{
			cout<<"\nNo Flights from "<<head[i]->city;
		}
		else
		{
			while(p!=NULL)

			{
				cout<<"\n"<<setw(8)<<head[i]->city<<setw(8)<<p->city<<setw(8)<<p->timeCost;
				count++;
				p=p->next;
			}
		}
		cout<<"\nNo. of flights: "<<count<<endl;;
		cout<<"-------------------------------------\n";
	}
}
int graph::getindex(string s1)
{
	for(int i=0;i<n;i++)
	{
		if(head[i]->city==s1)
			return i;
	}
	return -1;
}
void graph::insert(string city1,string city2,int time)
{
	node *source;
	node *dest=new node(city2,time);

	int ind=getindex(city1); //for getting head nodes index in array
	if(head[ind]==NULL)
		head[ind]=dest;
	else
	{
		source=head[ind];
		while(source->next!=NULL)
			source=source->next;
		source->next=dest;
	}
}
void graph::insertUndirected(string city1,string city2,int time)
{
	node *source;
	node *dest=new node(city2,time);
	node *dest2=new node(city1,time); //for second flight insertion

	int ind=getindex(city1); //for getting head nodes index in array
	int ind2=getindex(city2);
/*	if(head[ind]==NULL && head[ind2]==NULL) //when no flights in graph
	{
		head[ind]=dest;
		head[ind2]=dest2;
	}
	else if(head[ind]==NULL && head[ind2]!=NULL) //no flight in first list but flight in second list
	{
		head[ind]=dest; //inserted first flight
		source=head[ind2];
		while(source->next!=NULL)
			source=source->next;
		source->next=dest2;
	}
	else if(head[ind]!=NULL && head[ind2]==NULL)
	{
		head[ind2]=dest2; //inserted first flight
		source=head[ind];
		while(source->next!=NULL)
			source=source->next;
		source->next=dest;
	}
	else
	{*/
		source=head[ind];
		while(source->next!=NULL)
			source=source->next;
		source->next=dest;

		source=head[ind2];
		while(source->next!=NULL)
			source=source->next;
		source->next=dest2;

	//}
}
void graph::readdata(int gType)
{
	string city1,city2,tmpcity;
	int fcost;
	int flight;
	cout<<"\nENter City Details:\n ";
	for(int i=0;i<n;i++)
	{
		head[i]=new node;
		cout<<"Enter City "<<i+1<<" ";
		cin>>tmpcity;
		head[i]->city=tmpcity;
	}
	cout<<"\nEnter Number of Flights to insert: ";
	cin>>flight;
	if(gType==1)
	{
		for(int i=0;i<flight;i++)
		{
			cout<<"\nEnter Source:";
			cin>>city1;
			cout<<"Enter Destination:";
			cin>>city2;
			cout<<"Enter Time:";
			cin>>fcost;
			insert(city1,city2,fcost);
		}
	}
	else
	{
		for(int i=0;i<flight;i++)
		{
			cout<<"\nEnter Source:";
			cin>>city1;
			cout<<"Enter Destination:";
			cin>>city2;
			cout<<"Enter Time:";
			cin>>fcost;
			insertUndirected(city1,city2,fcost);
			//cout<<"\ninserted"<<i+1;
		}
	}
}
int main() {
	int number,choice;
	int graphype;
	cout<<"-------INDIA AIRLINES PVT LTD--------"
		<<"\n0. Undirected\n1.Directed\nEnter Flight data Insertion Type:";
	cin>>graphype;
	cout<<"\nENter Number of Airport Stations:";
	cin>>number;
	graph g1(number);
	g1.readdata(graphype);
	do
	{
		cout<<"-------- Menu --------"
				<<"\n1.Incoming Flights(In degree)"
				<<"\n2.Outgoing Flights(Out degree)"
				<<"\n3.DFS"
				<<"\n4.BFS"
				<<"\n5.Exit"
				<<"\nEnter your choice: ";
		cin>>choice;
		switch(choice)
		{
		case 1:
			cout <<"" << endl;
			g1.inFlights();
			break;
		case 2:
			g1.outFlights();
			break;
		case 3:
			g1.dfsTraversal();
			break;
		case 4:
			g1.BFS();
			break;
		default:
			cout<<"\nWrong Choice";
		}
	}while(choice!=5);


	return 0;
}

























888(OBST_K_Sequnce)
.
#include <bits/stdc++.h>
using namespace std;
int sum(int freq[], int i, int j);
int optCost(int freq[], int i, int j)
{
// Base cases
if (j < i) // no elements in this subarray
return 0;
if (j == i) // one element in this subarray
return freq[i];
// Get sum of freq[i], freq[i+1], ... freq[j]
int fsum = sum(freq, i, j);
// Initialize minimum value
int min = INT_MAX;
for (int r = i; r <= j; ++r)
{
int cost = optCost(freq, i, r - 1) +
optCost(freq, r + 1, j);
if (cost < min)
min = cost;
}
// Return minimum value
return min + fsum;
}
int optimalSearchTree(int keys[],
int freq[], int n)
{
return optCost(freq, 0, n - 1);
}
int sum(int freq[], int i, int j)
{
int s = 0;
for (int k = i; k <= j; k++)
s += freq[k];
return s;
}
// Driver Code
int main()
{
int keys[] = { 10 , 20 , 30 };
int freq[] = { 3 ,2 , 5 };
int n = sizeof(keys) / sizeof(keys[0]);
cout << "Cost of Optimal BST is "
<< optimalSearchTree(keys, freq, n);
return 0;
}
























999(Dict_Key_&_Mean)
.
#include<iostream>
#include<string.h>
using namespace std;

class dict
{
	char word[20],mean[50];
	dict *left,*right;
	int ht;
public:

	dict* create(dict *root);
	dict* insert(dict *root,char word[],char mean[]);
	void display(dict *);
	int height(dict *);
   	dict* rotateright(dict *);
   	dict* rotateleft(dict *);
        int BF(dict *);
        dict* deletion(dict *,char *);
   	dict* RR(dict*);
   	dict* LL(dict*);
   	dict* RL(dict*);
   	dict* LR(dict*);
};

dict* dict::create(dict *root)
{
	int n,i;
	char w[20],m[50];
	cout<<"\n Enter total number of words:";
	cin>>n;
	for(i=0;i<n;i++)
	{
		cout<<"\n Enter word "<<i+1<<" : ";
		cin>>w;
		cout<<"\n Enter meaning : ";
		cin>>m;
		root=insert(root,w,m);

	}
	return root;
}

dict* dict::insert(dict *root,char w[],char m[])
{
    if(root==NULL)
    {
    	root=new dict;
    	strcpy(root->word,w);
    	strcpy(root->mean,m);
    	root->left=NULL;
    	root->right=NULL;
    	return root;
    }
    else
    {
    if(strcmp(w,root->word)>0)
    {
    	root->right=insert(root->right,w,m);
    	if(BF(root)==-2)
    	{
    		if(strcmp(w,root->word)>0)
    			root=RR(root);
    		else
    			root=RL(root);
    	}

    }
    else
    {
    	if(strcmp(w,root->word)<0)
    	{
    	    root->left=insert(root->left,w,m);
    		if(BF(root)==2)
    		{
    			if(strcmp(w,root->word)<0)
    				root=LL(root);
    			else
    				root=LR(root);
    		}
    	}

    }
  }
root->ht=height(root);
return root;
}

void dict::display(dict* root)
{
	if(root!=NULL)
	{
		display(root->left);
		cout<<"\n Node is:"<<root->word<<"-"<<root->mean;
		display(root->right);
	}
}


int dict::height(dict *root)
{
	int lh,rh;
	if(root==NULL)
		return 0;
	if(root->left==NULL)
		lh=0;
	else
		lh=1+root->left->ht;
	if(root->right==NULL)
		rh=0;
	else
		rh=1+root->right->ht;

	if(lh>rh)
	{
		return(lh);
	}
	else
	{
		return(rh);
	}

}

dict* dict::rotateright(dict *x)
{
	dict *y;
	y=x->left;
	x->left=y->right;
	y->right=x;
	x->ht=height(x);
	y->ht=height(y);
	return(y);
}

dict* dict::rotateleft(dict *x)
{
	dict *y;
	y=x->right;
	x->right=y->left;
	y->left=x;
	x->ht=height(x);
	y->ht=height(y);
	return(y);
}
int dict::BF(dict *root)
{
	int lh,rh;
	if(root==NULL)
		return(0);
	if(root->left==NULL)
		lh=0;
	else
		lh=1+root->left->ht;
	if(root->right==NULL)
	  rh=0;
	else
		rh=1+root->right->ht;
	int z=lh-rh;
	return(z);
}

dict* dict:: deletion(dict *T,char *w)
{
	dict *p;
	if(T==NULL)
	{
		cout<<"\n Word not found!";
		return T;
	}
	else
	if(strcmp(w,T->word)>0)
	{
	    T->right=deletion(T->right,w);
	    if(BF(T)==2)
	    {
	    	if(BF(T->left)>=0)
	    		T=LL(T);
	    	else
	    		T=LR(T);
	    }

	}
	else
	if(strcmp(w,T->word)<0)
		{
			T->left=deletion(T->left,w);
			if(BF(T)==2)
				    {
				    	if(BF(T->right)<=0)
				    		T=RR(T);
				    	else
				    		T=RL(T);
				    }
		}
	else
	{
     if(T->right!=NULL)
     {
    	 p=T->right;
    	 while(p->left!=NULL)
    		 p=p->left;
    	 strcpy(T->word,p->word);
    	 strcpy(T->mean,p->mean);
    	 T->right=deletion(T->right,p->word);
    	 if(BF(T)==2)
    	 {
    		 if(BF(T->left)>=0)
    			 T=LL(T);
    		 else
    			 T=LR(T);
    	 }
     }
     else
    	 return(T->left);
	}
	T->ht=height(T);
	return(T);
}


dict* dict::RR(dict *T)
{
	T=rotateleft(T);
	return(T);
}
dict* dict::LL(dict *T)
{
	T=rotateright(T);
	return(T);
}
dict* dict::LR(dict *T)
{
	T->left=rotateleft(T->left);
	T=rotateright(T);
	return(T);
}
dict* dict::RL(dict *T)
{
	T->right=rotateright(T->right);
	T=rotateleft(T);
	return(T);
}

int main()
{
	int ch;
	dict d,*root;
	root=NULL;
	char w[20],m[50];
	cout<<"\n ***Dictionary : codyapa***";

	do{
		cout<<"\n\n MENU:";
		cout<<"\n1.Create \n2.Insert \n3.Delete\n4.Display \n5.Exit";
		cout<<"\n Enter your choice:";
		cin>>ch;

		switch(ch)
		{
		case 1: root=d.create(root);
		break;

		case 2: cout<<"\n Enter word:";
		        cin>>w;
		        cout<<"\n Enter meaning";
		        cin>>m;
		        root=d.insert(root,w,m);
		        break;

		case 3: cout<<"\nEnter word to delete";
		        cin>>w;
		        root=d.deletion(root,w);
		        break;


		case 4: d.display(root);
		break;


		case 5: break;
		default:cout<<"\n Invalid choice!";

		}
	}
	while(ch!=5);
	return 0;
}

./a.out

























111000(Heap)
.
#include<iostream>
using namespace std;
void maxHeapify(int heap[],int i,int n)
{
    int left=2*i;
    int right=(2*i)+1;
    int largest=i;
    
    cout<<"\nLeft = "<<left<<"\n";
    cout<<"right = "<<right<<"\n";
    cout<<"Largest= "<<largest<<"\n";
    
    if(left<=n && heap[i]<heap[left])
    {
        largest=left;
        cout<<"New largest(left)= "<<heap[largest]<<endl;
    }
    if(right<=n && heap[largest]<heap[right])
    {
        largest=right;
        cout<<"New largest(right)= "<<heap[largest]<<endl;

    }     
        if(largest !=i)
        {
            int temp=heap[largest];
            heap[largest]=heap[i];
            heap[i]=temp;
            cout<<"Swapped: "<<heap[largest]<<" with "<<heap[i]<<endl;
            maxHeapify(heap,largest,n);
        }
}
void buildHeap(int heap[],int n)
{
            for(int i=n/2;i>=1;i--)
                maxHeapify(heap,i,n);
             
             
}
int main()
{
    int n;
    cout<<"Enter No Of Elements ";
    cin>>n;
    int heap[n+1];
    cout<<"\nEnter Element ";
    for(int i=1;i<=n;i++)
    cin>>heap[i];

    cout<<"\nArray Element are:";
    for(int i=1;i<=n;i++)
    cout<<heap[i]<<" "; 
    
    buildHeap(heap,n);
    int heapSize=n;
    for(int i=n;i>=2;i--)
    {  
        int temp=heap[1];
        heap[1]=heap[i];
        heap[i]=temp;
        --heapSize;
        maxHeapify(heap,1,heapSize);
    }
    cout<<"\nAfter Sorting "<<endl;
    int j;
    for( j=1;j<=n;j++)
        cout<<heap[j]<<" ";
    cout<<"\nMAXIMUM MARKS ::"<<heap[n]<<endl;
    cout<<"\nMINIMUM MARKS ::"<<heap[1]<<endl;
    return 0;
}
